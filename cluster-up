#!/bin/bash

mkdir -p ~/.kube

first_node="hunter"
master_nodes=("crosshair" "tech")
agent_nodes=("elendil" "aragorn" "isildur" "faramir" "boromir" "cmdrcody" "wrecker" "elrond")

# install the first master / control-plane node

scp control-plane-config.yaml $first_node:
ssh $first_node 'sudo mkdir -p /etc/rancher/k3s; sudo cp control-plane-config.yaml /etc/rancher/k3s/config.yaml'

ssh $first_node "curl -sfL https://get.k3s.io | INSTALL_K3S_CHANNEL=latest INSTALL_K3S_EXEC='server' sh -"

# grab a local copy of the kube config from the first master node
ssh $first_node 'mkdir -p .kube; sudo cp /etc/rancher/k3s/k3s.yaml /home/gerry/.kube/config; sudo chown gerry:gerry .kube/config; sudo chmod 600 .kube/config;'
scp $first_node:.kube/config ~/.kube/config
# modify the kube config so it can be used on machines other than the master node
# this is pinned to the first master node until the remaining control plan nodes are live
yq -i '.clusters[0].cluster.server = "https://'$first_node':6443"|.clusters[0].name = "middle-earth"|.contexts[0].name = "middle-earth"|.contexts[0].context.cluster = "middle-earth"|.current-context = "middle-earth"' ~/.kube/config

# install cilium - requires the cilium CLI installed locally

[ -x "$(command -v cilium)" ] || {
    echo "cilium CLI not found - please install it"
    exit 1
}

cilium install --version 1.16.4 --set=ipam.operator.clusterPoolIPv4PodCIDRList="10.42.0.0/16"

# check that coredns is running before proceeding to add the remaining control plane nodes
echo "$(date +"%Y-%m-%d %H:%M:%S"): Waiting for coredns to start"

max_retries=20
retry_count=0
retry_interval=10
while true; do
    [ "$(kubectl -n kube-system get po -l k8s-app=kube-dns -o json | jq -r '.items[]|.status.phase')" = "Running" ] && break
    retry_count=$(($retry_count + 1))
    [ $retry_count -gt $max_retries ] && {
        echo "$(date +"%Y-%m-%d %H:%M:%S"): coredns is not running - stopping build";
        exit 1;
    }
    echo "$(date +"%Y-%m-%d %H:%M:%S"): coredns not running yet - waiting $retry_interval seconds"
    sleep $retry_interval
done

echo "$(date +"%Y-%m-%d %H:%M:%S"): Cluster is up!"

# Install the remaining control-plane nodes one at a time
for node in "${master_nodes[@]}"; do
    echo "$(date +"%Y-%m-%d %H:%M:%S"): installing master node $node"

    scp control-plane-config.yaml $node:
    ssh $node 'sudo mkdir -p /etc/rancher/k3s; sudo cp control-plane-config.yaml /etc/rancher/k3s/config.yaml'

    ssh $node "curl -sfL https://get.k3s.io | INSTALL_K3S_CHANNEL=latest INSTALL_K3S_EXEC='server' K3S_URL=https://$first_node:6443 K3S_TOKEN='$(ssh $first_node sudo cat /var/lib/rancher/k3s/server/node-token)' sh -"

    max_retries=30
    retry_count=0
    retry_interval=15
    while true; do
        node_ready=$(kubectl get node $node -o json | jq -r '.status.conditions[]|select(.type|match("Ready")).status')
        [ "$node_ready" = "True" ] && {
            echo "node $node is ready"
            break
        }

        retry_count=$(($retry_count + 1))
        [ $retry_count -gt $max_retries ] && {
            echo "$(date +"%Y-%m-%d %H:%M:%S"): node $node did not start in time - stopping build";
            exit 1;
        }

        echo "$(date +"%Y-%m-%d %H:%M:%S"): node $node not ready yet - waiting $retry_interval seconds"
        sleep $retry_interval
    done
done

# finish by installing the agent nodes
for node in "${agent_nodes[@]}"; do
    ./add-agent-node $first_node $node
done

# update the kube config to use the domain name now that all control plane nodes are up
# temporarily disabling this until cluster is stable and we can rebuild haproxy
# sed -i "s/$first_node/middle-earth.g2dev.net/" ~/.kube/config
# copy back to the first master node so other clients can grab latest with mods
scp ~/.kube/config $first_node:.kube/

# create the cert manager namespace early so we can pre-load the cloudflare secret (the other manifests will create their own namespaces)
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Namespace
metadata:
  name: cert-manager
EOF

./create-cloudflare-secret | kubectl apply -f -

# move the manifests out to the first master node to load
ssh $first_node 'mkdir -p manifests'
scp manifests/* $first_node:manifests/
ssh $first_node sudo cp manifests/* /var/lib/rancher/k3s/server/manifests

#todo: add a check to ensure ingress-nginx is running before proceeding
echo "$(date +"%Y-%m-%d %H:%M:%S"): Waiting for ingress-nginx to start"
